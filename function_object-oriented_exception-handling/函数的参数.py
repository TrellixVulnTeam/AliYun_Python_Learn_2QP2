# 定义一个函数，可以用来求任意两个数的和
# def sum():
#     a = int(input())
#     b = int(input())
#     print(a+b)
# sum()
def fn2(a, b):
    print('a =', a)
    print('b =', b)
    print(a + b)


# 调用函数时，来传递实参
fn2(10, 20)
fn2(123, 456)


#   -练习1:
#       定义一个函数，可以用来求任意三个输的乘积
def mul(a, b, c):
    print('a =', a)
    print('b =', b)
    print('c =', c)
    print(a * b * c)


mul(10, 20, 30)


#   -练习2：
#       定义一个函数，可以根据不同的用户名显示不同的欢迎信息
def welcome(username):
    print('欢迎', username, '光临！')


welcome('李刚')


# 定义一个函数
# 定义形参时，可以为形参指定默认值
# 指定了默认值以后，如果用户传递了参数则没有任何作用，如果没有传递则会生效
def fn(a, b, c=20):
    print('a =', a)
    print('b =', b)
    print('c =', c)


fn(1, 2, 3)
fn(1, 2)

# 实参的传递方式
# 位置参数
# 位置参数就是将对应位置的实参赋值给对应位置的形参
# 第一个实参复制给第一个形参，第二哥实参赋值给第二个形参...  fn(1,2,3)
# 关键字参数
# 关键词参数，可以不按照形参定义的顺序去传递，而是接根据参数名去传递参数
fn(b=20, c=15, a=6)
# 位置参数和关键字参数可以混合使用，但是位置参数必须在关键字参数前边，也不能重复使用（关键字参数和位置参数是同一个）
fn(1, c=20, b=22)


def fn3(a):
    print('a =', a)


# 函数在调用时，解析起不会检查实参的类型，实参可以传递任意类型的类型
b = 123
b = True
b = 'hello'
b = None
b = [1, 2, 3]
fn3(b)
fn3(fn)


def fn4(a, b):
    print(a + b)


# fn4(123, '456')  # 传递实参需要注意类型，类型不一致可能会报错
def fn5(a):
    # 在函数中对形参进行重新赋值，不会影响其他的变量
    # a = 20
    # a是一个列表，尝试修改列表中的元素
    # 如果形参执行的是一个对象，当我们通过形参去修改对象时，会影响到所有指向该对象的变量
    a[0] = 30
    print('a =', a, id(a))


c = 10
c = [1, 2, 3]
# fn5(c)
# 通过切片和copy可以不影响 c
# fn5(c.copy())
fn5(c[:])
print('c =', c, id(c))
