# 第七章 异常和文件
# 异常
#   程序在运行过程中，不可避免的回出现一些错误，比如
#       使用了没有赋值的变量
#       使用了不存在的索引
#       除0
#       。。。。。。
#   这些错误在程序中我们称其为异常
#   程序运行过程中，一旦出现异常讲会导致程序立即终止，异常以后的代码全部不会执行

# 处理异常
#   程序运行时出现异常，目的并不是让我们的程序直接终止
#   python是希望再出现异常时，我们可以编写代码来对异常进行处理
# try语句
#   try:
#       代码块（可能出现错误的语句）
#   except:
#       代码块（出现错误以后的处理方式）
#   else:
#       代码块（没出错时要执行的语句）

#   可以将可能出错的代码放入到try语句中，这样如果代卖没有错误，则会正常执行
#       如果出现错误，则会执行except子句中的代码，这样我们就可以通过代码来处理异常
#       避免因为一个异常导致整个程序的终止
# 以上具体查看参考  异常例子.py


# 异常的传播(抛出异常)
#   当在函数中初心啊一场是，如果在函数中对异常进行了处理，则异常不会咋自己续传播,
#       如果函数中没有对异常进行处理，则异常会继续向函数调用处传播
#   如果函数调用处处理了异常，则不再传播，如果没有处理则继续向调用处传播
#   直到传递到全局作用域(主模块）如果依然没有处理，则程序终止，并且显示异常信息

#   抛出的异常
#       当程序运行过程中出现异常以后，所有的异常信息会被保存一个专门的异常对象中，
#       而异常传播时，实际上就是异常对象抛给了调用处
#       比如: ZeroDivisionError 类的对象专门用来表示除e的异常
#       NameError 类的对象专门用来处理变量错误的异常
#       在Python 为我们提供了多个异常对象有很多很多一系列的错误。


# 如何捕获异常对象
# 当程序运行过程中出现异常以后，所有的异常信息都会被保存在一个专门的异常对象中，而异常传播时，
#   实际上就是异常对象抛给了调用处。如果except后跟着一个异常的类型，那么只会捕获该类型的异常，比如：
#   ZeroDivisionError 类的对象用来表示除 0 异常
#   NameError 类的对象用来处理变量错误的异常
#   如果 except 后没有任何内容，则此时会捕获到所有异常， exception 是所有异常类的父类，相当于 except，
#   所以如果 except 后跟着 exception，也会捕获到所有异常。在异常类后面跟着 as xx 此时 xx 就是异常对象，
#   但通常情况下没有特别大的作用。运用 Finally 子句即无论是否出现异常，该子句都会执行，所以通常将必须执行的代码放在 finally 子句中。

# 三、try 语句
# 将可能出错的代码放入到 try 语句中，如果代码没有错误，则会正常执行，如果出现错误，则会执行 except 子句中的代码，
# 通过这种方式处理异常，避免给因为一个异常导致整个程序的终止。Try 语句如下:
# Try:
#   代码块(可能出现错误的语句)
# Except 异常类型 as 异常名:
#   代码块(出现错误以后的处理方式)
# Except 异常类型 as 异常名:
#   代码块(出现错误以后的处理方式)
# Else:
#   代码块(没出错时要执行的语句)
# Finally:
#   代码块(该代码块总会执行)
# 其中 Try 语句是必须的，else 语句可有可无，except 和 finally 至少有一个即可。


# 抛出异常
# 1.rise语句实现抛出异常对象

